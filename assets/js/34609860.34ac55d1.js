"use strict";(self.webpackChunkidempiere_id_github_io=self.webpackChunkidempiere_id_github_io||[]).push([[2271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"How to Contribute",sidebar_label:"How to Contribute",sidebar_position:1,description:"Step-by-step checklist and workflow for contributing to the iDempiere core"},o=void 0,l={unversionedId:"basic-development/contributing-to-core/how-to-contribute",id:"basic-development/contributing-to-core/how-to-contribute",title:"How to Contribute",description:"Step-by-step checklist and workflow for contributing to the iDempiere core",source:"@site/docs/basic-development/contributing-to-core/how-to-contribute.md",sourceDirName:"basic-development/contributing-to-core",slug:"/basic-development/contributing-to-core/how-to-contribute",permalink:"/docs/basic-development/contributing-to-core/how-to-contribute",draft:!1,editUrl:"https://github.com/idempiere/idempiere.github.io/tree/main/docs/basic-development/contributing-to-core/how-to-contribute.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"How to Contribute",sidebar_label:"How to Contribute",sidebar_position:1,description:"Step-by-step checklist and workflow for contributing to the iDempiere core"},sidebar:"tutorialSidebar",previous:{title:"Contributing to Core",permalink:"/docs/category/contributing-to-core"},next:{title:"Git Workflow",permalink:"/docs/basic-development/contributing-to-core/git-workflow"}},s={},p=[{value:"\u2705 Contribution Checklist",id:"-contribution-checklist",level:2},{value:"\ud83d\udce6 Final Step: Create the pull request",id:"-final-step-create-the-pull-request",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a checklist of the ",(0,a.kt)("strong",{parentName:"p"},"minimum steps")," required to submit high-quality pull requests to the iDempiere core:"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If your contribution includes database changes, follow the ",(0,a.kt)("a",{parentName:"p",href:"./changing-the-database"},"Changing the Database")," instructions ",(0,a.kt)("strong",{parentName:"p"},"before writing any code"),".")),(0,a.kt)("h2",{id:"-contribution-checklist"},"\u2705 Contribution Checklist"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Every commit must be related to a JIRA ticket."),(0,a.kt)("br",{parentName:"p"}),"\n","Please ",(0,a.kt)("strong",{parentName:"p"},"do not mix unrelated commits"),". For example, if your change includes a refactoring, submit:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"One commit for the ",(0,a.kt)("strong",{parentName:"li"},"refactoring")),(0,a.kt)("li",{parentName:"ul"},"Another commit for the ",(0,a.kt)("strong",{parentName:"li"},"actual solution")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Data access hierarchy"),": Use the following methods in order of preference when retrieving data:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Model Classes")," \u2013 Most ",(0,a.kt)("inlineCode",{parentName:"li"},"M*")," classes have convenient ",(0,a.kt)("inlineCode",{parentName:"li"},"get")," methods."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Query class")," \u2013 Clean and efficient for many use cases."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"DB class (",(0,a.kt)("inlineCode",{parentName:"strong"},"DB.get()"),")")," \u2013 Use with care."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"JDBC (raw access)")," \u2013 Only if absolutely necessary, as it impacts memory and performance."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Code standards"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Follow Java standards (meaningful names, camelCase)."),(0,a.kt)("li",{parentName:"ul"},"Use proper ",(0,a.kt)("strong",{parentName:"li"},"indentation")," and formatting for readability."),(0,a.kt)("li",{parentName:"ul"},"Add the ",(0,a.kt)("strong",{parentName:"li"},"GPLv2 License Header")," to each new Java class."),(0,a.kt)("li",{parentName:"ul"},"When adding, removing, or changing the signature of a ",(0,a.kt)("strong",{parentName:"li"},"public method"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Prefer method overloading")," instead of changing existing method signatures. This preserves backward compatibility and helps plugins continue working."),(0,a.kt)("li",{parentName:"ul"},"If you change the signature of a class or interface, ",(0,a.kt)("strong",{parentName:"li"},"regenerate the ",(0,a.kt)("inlineCode",{parentName:"strong"},"serialVersionUID"))," if applicable. This ensures compatibility when serializing Java classes.")))))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Run and maintain unit tests"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Ensure that ",(0,a.kt)("strong",{parentName:"li"},"all existing unit tests pass")," before submitting your pull request."),(0,a.kt)("li",{parentName:"ul"},"If your contribution introduces new logic or fixes a bug, consider adding ",(0,a.kt)("strong",{parentName:"li"},"new unit tests")," to verify the behavior."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Perform a collateral impact analysis"),":",(0,a.kt)("br",{parentName:"p"}),"\n","Even if your change affects only one line, check:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Where that method/class is referenced elsewhere"),(0,a.kt)("li",{parentName:"ul"},"Whether your change introduces unexpected behavior"),(0,a.kt)("li",{parentName:"ul"},"All relevant test cases"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Avoid common pitfalls"),":",(0,a.kt)("br",{parentName:"p"}),"\n","Review the list of ",(0,a.kt)("a",{parentName:"p",href:"./common-issues"},"Common Issues")," before submitting your patch."))),(0,a.kt)("h2",{id:"-final-step-create-the-pull-request"},"\ud83d\udce6 Final Step: Create the pull request"),(0,a.kt)("p",null,"When your code is ready, create a ",(0,a.kt)("a",{parentName:"p",href:"./git-workflow"},"Pull Request")," with a ",(0,a.kt)("strong",{parentName:"p"},"commit message that includes the JIRA ticket number")," (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"IDEMPIERE-1234 Fix XYZ"),").",(0,a.kt)("br",{parentName:"p"}),"\n","This will allow automatic linking between the Git repository and the JIRA ticket."))}m.isMDXComponent=!0}}]);