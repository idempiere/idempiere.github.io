"use strict";(self.webpackChunkidempiere_id_github_io=self.webpackChunkidempiere_id_github_io||[]).push([[5539],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=u(a),d=l,g=s["".concat(p,".").concat(d)]||s[d]||c[d]||o;return a?n.createElement(g,r(r({ref:t},m),{},{components:a})):n.createElement(g,r({ref:t},m))}));function g(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:l,r[1]=i;for(var u=2;u<o;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9594:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(7462),l=(a(7294),a(3905));const o={title:"Developing Plug-in Callouts",sidebar_label:"Callouts",description:"Learn how to implement column callouts in iDempiere plug-ins using modern best practices.",sidebar_position:5},r="Developing Plug-in Callouts",i={unversionedId:"basic-development/plugin-development/plugin-callouts",id:"basic-development/plugin-development/plugin-callouts",title:"Developing Plug-in Callouts",description:"Learn how to implement column callouts in iDempiere plug-ins using modern best practices.",source:"@site/docs/basic-development/plugin-development/plugin-callouts.md",sourceDirName:"basic-development/plugin-development",slug:"/basic-development/plugin-development/plugin-callouts",permalink:"/docs/basic-development/plugin-development/plugin-callouts",draft:!1,editUrl:"https://github.com/idempiere/idempiere.github.io/tree/main/docs/basic-development/plugin-development/plugin-callouts.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Developing Plug-in Callouts",sidebar_label:"Callouts",description:"Learn how to implement column callouts in iDempiere plug-ins using modern best practices.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Service Annotations",permalink:"/docs/basic-development/plugin-development/annotations-instead-xml"},next:{title:"Event Handlers",permalink:"/docs/basic-development/plugin-development/plugin-eventhandler"}},p={},u=[{value:"\ud83c\udfaf Goal",id:"-goal",level:2},{value:"What is a Callout?",id:"what-is-a-callout",level:3},{value:"Implementation Approaches",id:"implementation-approaches",level:3},{value:"\u2705 Prerequisites",id:"-prerequisites",level:2},{value:"\ud83d\udccb Implementation Methods",id:"-implementation-methods",level:2},{value:"Modern Approach (iDempiere 9+): Mapped Column Callout Factory",id:"modern-approach-idempiere-9-mapped-column-callout-factory",level:3},{value:"Method 1: Register at Plugin Activator Start",id:"method-1-register-at-plugin-activator-start",level:4},{value:"Method 2: Bind via OSGi Component Service",id:"method-2-bind-via-osgi-component-service",level:4},{value:"Method 3: Extend MappedColumnCalloutFactory",id:"method-3-extend-mappedcolumncalloutfactory",level:4},{value:"Annotation-Based Callouts (Recommended for iDempiere 9+)",id:"annotation-based-callouts-recommended-for-idempiere-9",level:3},{value:"Step 1: Annotate Your Callout Class",id:"step-1-annotate-your-callout-class",level:4},{value:"Step 2: Register Annotated Callouts",id:"step-2-register-annotated-callouts",level:4},{value:"Using a CalloutFactory (iDempiere &lt; 9)",id:"using-a-calloutfactory-idempiere--9",level:3},{value:"Step 1: Create the Callout Class",id:"step-1-create-the-callout-class",level:4},{value:"Step 2: Create the Callout Factory",id:"step-2-create-the-callout-factory",level:4},{value:"Step 3: Register as an OSGi Component",id:"step-3-register-as-an-osgi-component",level:4},{value:"\ud83e\uddea Testing Your Callout",id:"-testing-your-callout",level:2},{value:"\ud83c\udfa5 Video Tutorial",id:"-video-tutorial",level:2},{value:"\ud83d\udce6 Exporting Your Plug-in",id:"-exporting-your-plug-in",level:2},{value:"\ud83d\udd17 Related Resources",id:"-related-resources",level:2}],m={toc:u},s="wrapper";function c(e){let{components:t,...a}=e;return(0,l.kt)(s,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"developing-plug-in-callouts"},"Developing Plug-in Callouts"),(0,l.kt)("h2",{id:"-goal"},"\ud83c\udfaf Goal"),(0,l.kt)("p",null,"This tutorial shows you how to develop ",(0,l.kt)("strong",{parentName:"p"},"callouts")," in your own plug-in. "),(0,l.kt)("h3",{id:"what-is-a-callout"},"What is a Callout?"),(0,l.kt)("p",null,"A ",(0,l.kt)("strong",{parentName:"p"},"callout")," is a piece of code that executes automatically when a user changes the value of a field in a window. Callouts are commonly used to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Validate input data")," before it's saved"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Auto-fill related fields")," based on the changed value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Perform calculations")," (e.g., calculate totals, discounts, or taxes)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Show warnings or messages")," to guide the user"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Dynamically enable/disable fields")," based on conditions"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Load data from related records")," (e.g., populate product details when selecting a product)")),(0,l.kt)("p",null,"For example, when a user selects a Business Partner in a Sales Order, a callout can automatically fill in the payment terms, price list, and shipping address."),(0,l.kt)("admonition",{title:"Scope of Callouts",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Callouts ",(0,l.kt)("strong",{parentName:"p"},"only work")," when data is entered through:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"The iDempiere UI")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"CSV Importer"))),(0,l.kt)("p",{parentName:"admonition"},"Callouts do ",(0,l.kt)("strong",{parentName:"p"},"NOT")," execute when records are created or modified via:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"REST API calls")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Background processes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Direct database operations")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Java code using PO.save()"))),(0,l.kt)("p",{parentName:"admonition"},"If you need validation or logic that works across all entry points, use an ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"./plugin-eventhandler"},"Event Handler"))," instead, which intercepts all record changes regardless of the source.")),(0,l.kt)("h3",{id:"implementation-approaches"},"Implementation Approaches"),(0,l.kt)("p",null,"This guide covers the following methods for implementing callouts:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Mapped Column Callout Factory (iDempiere 9+)")," - Modern approach with three registration methods:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Direct registration via Bundle Activator"),(0,l.kt)("li",{parentName:"ul"},"OSGi Component with service binding"),(0,l.kt)("li",{parentName:"ul"},"Factory subclass approach"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Annotation-Based Callouts (iDempiere 9+)")," - ",(0,l.kt)("em",{parentName:"p"},"(Recommended)")," Use ",(0,l.kt)("inlineCode",{parentName:"p"},"@Callout")," annotations to declare callouts declaratively")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Legacy CalloutFactory (Pre-iDempiere 9)")," - Traditional approach using ",(0,l.kt)("inlineCode",{parentName:"p"},"IColumnCalloutFactory")," interface"))),(0,l.kt)("admonition",{title:"Recommended Approach",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"For ",(0,l.kt)("strong",{parentName:"p"},"iDempiere 9+"),", use ",(0,l.kt)("strong",{parentName:"p"},"annotation-based callouts")," for the cleanest and most maintainable code.",(0,l.kt)("br",{parentName:"p"}),"\n","For ",(0,l.kt)("strong",{parentName:"p"},"earlier versions"),", use the ",(0,l.kt)("strong",{parentName:"p"},"CalloutFactory")," approach.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-prerequisites"},"\u2705 Prerequisites"),(0,l.kt)("p",null,"Before starting, review:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./developing-plugins"},"Developing Plug-Ins Without Affecting the Trunk")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./plugin-running-locally"},"Running Plug-ins Locally"))),(0,l.kt)("p",null,"You should already know how to create a plug-in, as this guide will not cover that in detail."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-implementation-methods"},"\ud83d\udccb Implementation Methods"),(0,l.kt)("h3",{id:"modern-approach-idempiere-9-mapped-column-callout-factory"},"Modern Approach (iDempiere 9+): Mapped Column Callout Factory"),(0,l.kt)("p",null,"Starting with ",(0,l.kt)("strong",{parentName:"p"},"iDempiere 9"),", a new column callout factory base class was introduced that's backed by Map and Lambda functional objects. This approach supports:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Direct registration via Bundle Activator")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"OSGi Component with service binding")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Annotation-based callout registration")," ",(0,l.kt)("em",{parentName:"li"},"(recommended)"))),(0,l.kt)("admonition",{title:"Recommended",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The annotation-based approach is the simplest and most maintainable method for iDempiere 9+.")),(0,l.kt)("h4",{id:"method-1-register-at-plugin-activator-start"},"Method 1: Register at Plugin Activator Start"),(0,l.kt)("p",null,"Register your callout directly in the plugin's activator ",(0,l.kt)("inlineCode",{parentName:"p"},"start()")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public class MyTestAmountCallout implements IColumnCallout {\n    @Override\n    public String start(Properties ctx, int WindowNo, GridTab mTab, \n                       GridField mField, Object value, Object oldValue) {\n        // Your callout logic here\n        return null;\n    }       \n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public void start(BundleContext context) throws Exception {\n    var factory = Core.getMappedColumnCalloutFactory();\n    factory.addMapping(MTest.Table_Name, MTest.COLUMNNAME_T_Amount, \n                      () -> new MyTestAmountCallout());\n}\n")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"Core.getMappedColumnCalloutFactory()")," can return ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if your bundle activates before the ",(0,l.kt)("inlineCode",{parentName:"p"},"IMappedColumnCalloutFactory")," service. Use Method 2 or 3 for safer registration.")),(0,l.kt)("h4",{id:"method-2-bind-via-osgi-component-service"},"Method 2: Bind via OSGi Component Service"),(0,l.kt)("p",null,"Create an OSGi component and bind to the ",(0,l.kt)("inlineCode",{parentName:"p"},"IMappedColumnCalloutFactory")," service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component(immediate = true)\npublic class MyCalloutComponent {\n    \n    @Reference\n    public void bindService(IMappedColumnCalloutFactory factory) {\n        factory.addMapping(MTest.Table_Name, MTest.COLUMNNAME_T_Amount, \n                          () -> new MyTestAmountCallout());\n    }\n}\n")),(0,l.kt)("h4",{id:"method-3-extend-mappedcolumncalloutfactory"},"Method 3: Extend MappedColumnCalloutFactory"),(0,l.kt)("p",null,"Create a subclass of ",(0,l.kt)("inlineCode",{parentName:"p"},"MappedColumnCalloutFactory")," and register it as an ",(0,l.kt)("inlineCode",{parentName:"p"},"IColumnCalloutFactory")," service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component(service = IColumnCalloutFactory.class)\npublic class MyFactory extends MappedColumnCalloutFactory {\n    public MyFactory() {\n        addMapping(MTest.Table_Name, MTest.COLUMNNAME_T_Amount, \n                  () -> new MyTestAmountCallout());\n    }\n}\n")),(0,l.kt)("admonition",{title:"Important",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Do ",(0,l.kt)("strong",{parentName:"p"},"NOT")," register as ",(0,l.kt)("inlineCode",{parentName:"p"},"IMappedColumnCalloutFactory")," service when extending ",(0,l.kt)("inlineCode",{parentName:"p"},"MappedColumnCalloutFactory"),".")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"annotation-based-callouts-recommended-for-idempiere-9"},"Annotation-Based Callouts (Recommended for iDempiere 9+)"),(0,l.kt)("p",null,"The annotation approach allows you to declare callouts directly on your callout classes using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Callout")," annotation."),(0,l.kt)("h4",{id:"step-1-annotate-your-callout-class"},"Step 1: Annotate Your Callout Class"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Callout")," annotation with ",(0,l.kt)("inlineCode",{parentName:"p"},"tableName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"columnName")," parameters. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," to match any table or column name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Single Column Example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import org.adempiere.base.annotation.Callout;\nimport org.adempiere.base.IColumnCallout;\n\n@Callout(tableName = "AD_InfoWindow", columnName = "AD_Table_ID")\npublic class CalloutInfoWindow implements IColumnCallout {\n    \n    @Override\n    public String start(Properties ctx, int WindowNo, GridTab mTab, \n                       GridField mField, Object value, Object oldValue) {\n        // Your callout logic\n        return null;\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Multiple Columns Example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'@Callout(tableName = "AD_InfoColumn", \n         columnName = {"AD_Element_ID", "AD_Reference_ID"})\npublic class CalloutInfoColumn implements IColumnCallout {\n    \n    @Override\n    public String start(Properties ctx, int WindowNo, GridTab mTab, \n                       GridField mField, Object value, Object oldValue) {\n        // Your callout logic\n        return null;\n    }\n}\n')),(0,l.kt)("h4",{id:"step-2-register-annotated-callouts"},"Step 2: Register Annotated Callouts"),(0,l.kt)("p",null,"You have two options for scanning and registering annotated callout classes:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Option A: Create an OSGi Component (Recommended)")),(0,l.kt)("p",null,"Extend ",(0,l.kt)("inlineCode",{parentName:"p"},"AnnotationBasedColumnCalloutFactory")," and register it as an ",(0,l.kt)("inlineCode",{parentName:"p"},"IColumnCalloutFactory")," service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component(service = IColumnCalloutFactory.class)\npublic class MyAnnotationCalloutFactory extends AnnotationBasedColumnCalloutFactory {\n    // The base class automatically scans for @Callout annotations\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Option B: Scan in Activator with Safe Service Binding")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"@Component"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@Reference"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"@Activate")," to ensure safe registration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\nimport org.osgi.service.component.annotations.ReferenceCardinality;\n\n@Component(immediate = true)\npublic class MyActivator implements BundleActivator {\n    \n    @Reference(service = IMappedColumnCalloutFactory.class, \n               cardinality = ReferenceCardinality.MANDATORY) \n    private IMappedColumnCalloutFactory mappedCalloutFactory;\n    \n    public MyActivator() {\n    }\n    \n    @Override\n    public void start(BundleContext context) throws Exception {\n    }\n    \n    @Override\n    public void stop(BundleContext context) throws Exception {\n    }\n    \n    // activate() is called only after mappedCalloutFactory reference is injected\n    @Activate\n    public void activate(BundleContext context) {\n        // Replace with your package name containing annotated callout classes\n        mappedCalloutFactory.scan(context, "org.mycompany.callout");\n    }\n}\n')),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@Activate")," approach ensures that your callouts are only registered after the ",(0,l.kt)("inlineCode",{parentName:"p"},"IMappedColumnCalloutFactory")," service is available, avoiding null pointer exceptions.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example Project:")),(0,l.kt)("p",null,"For a complete working example of annotation-based callouts, see:",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hengsin/idempiere-examples/tree/main/org.idempiere.callout.annotation.example"},"idempiere-examples: Callout Annotation Example")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Technical References:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://idempiere.atlassian.net/browse/IDEMPIERE-4690"},"IDEMPIERE-4690")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://idempiere.atlassian.net/browse/IDEMPIERE-5015"},"IDEMPIERE-5015"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"using-a-calloutfactory-idempiere--9"},"Using a CalloutFactory (iDempiere < 9)"),(0,l.kt)("p",null,"This approach is recommended for versions before iDempiere 9."),(0,l.kt)("h4",{id:"step-1-create-the-callout-class"},"Step 1: Create the Callout Class"),(0,l.kt)("p",null,"Create a class that implements the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/idempiere/idempiere/blob/master/org.adempiere.base/src/org/adempiere/base/IColumnCallout.java"},(0,l.kt)("inlineCode",{parentName:"a"},"IColumnCallout"))," interface."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: ",(0,l.kt)("inlineCode",{parentName:"strong"},"CalloutFromFactory.java"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'package com.example.callout;\n\nimport org.adempiere.base.IColumnCallout;\nimport org.compiere.model.GridField;\nimport org.compiere.model.GridTab;\nimport java.util.Properties;\n\npublic class CalloutFromFactory implements IColumnCallout {\n    \n    @Override\n    public String start(Properties ctx, int WindowNo, GridTab mTab, \n                       GridField mField, Object value, Object oldValue) {\n        \n        // Your callout logic here\n        System.out.println("Callout triggered on: " + mField.getColumnName());\n        System.out.println("New value: " + value);\n        \n        return null; // Return null if no error, or an error message string\n    }\n}\n')),(0,l.kt)("h4",{id:"step-2-create-the-callout-factory"},"Step 2: Create the Callout Factory"),(0,l.kt)("p",null,"Create a factory class that implements ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/idempiere/idempiere/blob/master/org.adempiere.base/src/org/adempiere/base/IColumnCalloutFactory.java"},(0,l.kt)("inlineCode",{parentName:"a"},"IColumnCalloutFactory")),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: ",(0,l.kt)("inlineCode",{parentName:"strong"},"CalloutFactory.java"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"package com.example.callout;\n\nimport org.adempiere.base.IColumnCallout;\nimport org.adempiere.base.IColumnCalloutFactory;\nimport org.compiere.model.MProduct;\n\npublic class CalloutFactory implements IColumnCalloutFactory {\n\n    @Override\n    public IColumnCallout[] getColumnCallouts(String tableName, String columnName) {\n        \n        // Check if this is the column we want to intercept\n        if (tableName.equals(MProduct.Table_Name) && \n            columnName.equals(MProduct.COLUMNNAME_DocumentNote)) {\n            \n            return new IColumnCallout[] { new CalloutFromFactory() };\n        }\n        \n        return null; // No callout for other columns\n    }\n}\n")),(0,l.kt)("h4",{id:"step-3-register-as-an-osgi-component"},"Step 3: Register as an OSGi Component"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Option A: Using Annotations (Recommended)")),(0,l.kt)("p",null,"Add the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Component")," annotation to your factory class. See ",(0,l.kt)("a",{parentName:"p",href:"./developing-plugins#event-handle"},"Event Handling with Annotations")," for details."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import org.osgi.service.component.annotations.Component;\n\n@Component(\n    service = IColumnCalloutFactory.class,\n    immediate = true\n)\npublic class CalloutFactory implements IColumnCalloutFactory {\n    // ... implementation\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Option B: Manual Component Definition")),(0,l.kt)("p",null,"If not using annotations, create a component definition XML file manually."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create a directory named ",(0,l.kt)("inlineCode",{parentName:"li"},"OSGI-INF")," in your project root (this is the OSGi convention)"),(0,l.kt)("li",{parentName:"ol"},"Create a file ",(0,l.kt)("inlineCode",{parentName:"li"},"OSGI-INF/calloutfactory.xml"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<scr:component xmlns:scr="http://www.osgi.org/xmlns/scr/v1.1.0" \n               name="com.example.callout.CalloutFactory">\n   <implementation class="com.example.callout.CalloutFactory"/>\n   <service>\n      <provide interface="org.adempiere.base.IColumnCalloutFactory"/>\n   </service>\n</scr:component>\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Update your ",(0,l.kt)("inlineCode",{parentName:"li"},"META-INF/MANIFEST.MF")," to include the component:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Service-Component: OSGI-INF/calloutfactory.xml\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Ensure ",(0,l.kt)("inlineCode",{parentName:"li"},"build.properties")," includes the OSGI-INF directory in the binary build:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bin.includes = META-INF/,\\\n               .,\\\n               OSGI-INF/\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-testing-your-callout"},"\ud83e\uddea Testing Your Callout"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Start the iDempiere client"),(0,l.kt)("li",{parentName:"ol"},"Log in as ",(0,l.kt)("strong",{parentName:"li"},"GardenAdmin")," to ",(0,l.kt)("strong",{parentName:"li"},"GardenWorld")),(0,l.kt)("li",{parentName:"ol"},"Open the ",(0,l.kt)("strong",{parentName:"li"},"Product")," window"),(0,l.kt)("li",{parentName:"ol"},"Enter or modify a value in the ",(0,l.kt)("strong",{parentName:"li"},"Document Note")," field"),(0,l.kt)("li",{parentName:"ol"},"Tab out of the field to trigger the callout"),(0,l.kt)("li",{parentName:"ol"},"Check your console log for the output")),(0,l.kt)("p",null,"You should see:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Callout triggered on: DocumentNote\nNew value: [your entered text]\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-video-tutorial"},"\ud83c\udfa5 Video Tutorial"),(0,l.kt)("p",null,"Watch this video walkthrough:",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=twC6Dy8R5g4"},"https://www.youtube.com/watch?v=twC6Dy8R5g4")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-exporting-your-plug-in"},"\ud83d\udce6 Exporting Your Plug-in"),(0,l.kt)("p",null,"Before exporting your plug-in as a JAR:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Open ",(0,l.kt)("inlineCode",{parentName:"li"},"build.properties")),(0,l.kt)("li",{parentName:"ol"},"Verify that ",(0,l.kt)("inlineCode",{parentName:"li"},"OSGI-INF/")," is listed in ",(0,l.kt)("strong",{parentName:"li"},"Binary Build")),(0,l.kt)("li",{parentName:"ol"},"Ensure your component definition XML files are included")),(0,l.kt)("p",null,"This ensures your OSGi component definitions are packaged correctly."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"-related-resources"},"\ud83d\udd17 Related Resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/idempiere/idempiere/blob/master/org.adempiere.base/src/org/adempiere/base/IColumnCallout.java"},"IColumnCallout Interface")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/idempiere/idempiere/blob/master/org.adempiere.base/src/org/adempiere/base/IColumnCalloutFactory.java"},"IColumnCalloutFactory Interface")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://wiki.idempiere.org/en/Plugin"},"OSGi Declarative Services")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://wiki.idempiere.org/en/NF9_OSGi_New_Column_Callout_Factory"},"iDempiere 9 Callout Factory"))))}c.isMDXComponent=!0}}]);